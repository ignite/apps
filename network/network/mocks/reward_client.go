// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/ignite/network/x/reward/types"
	"github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// RewardClient is an autogenerated mock type for the RewardClient type
type RewardClient struct {
	mock.Mock
}

type RewardClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RewardClient) EXPECT() *RewardClient_Expecter {
	return &RewardClient_Expecter{mock: &_m.Mock}
}

// GetRewardPool provides a mock function with given fields: ctx, in, opts
func (_m *RewardClient) GetRewardPool(ctx context.Context, in *types.QueryGetRewardPoolRequest, opts ...grpc.CallOption) (*types.QueryGetRewardPoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardPool")
	}

	var r0 *types.QueryGetRewardPoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRewardPoolRequest, ...grpc.CallOption) (*types.QueryGetRewardPoolResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetRewardPoolRequest, ...grpc.CallOption) *types.QueryGetRewardPoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetRewardPoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetRewardPoolRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewardClient_GetRewardPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewardPool'
type RewardClient_GetRewardPool_Call struct {
	*mock.Call
}

// GetRewardPool is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryGetRewardPoolRequest
//   - opts ...grpc.CallOption
func (_e *RewardClient_Expecter) GetRewardPool(ctx interface{}, in interface{}, opts ...interface{}) *RewardClient_GetRewardPool_Call {
	return &RewardClient_GetRewardPool_Call{Call: _e.mock.On("GetRewardPool",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RewardClient_GetRewardPool_Call) Run(run func(ctx context.Context, in *types.QueryGetRewardPoolRequest, opts ...grpc.CallOption)) *RewardClient_GetRewardPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryGetRewardPoolRequest), variadicArgs...)
	})
	return _c
}

func (_c *RewardClient_GetRewardPool_Call) Return(_a0 *types.QueryGetRewardPoolResponse, _a1 error) *RewardClient_GetRewardPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RewardClient_GetRewardPool_Call) RunAndReturn(run func(context.Context, *types.QueryGetRewardPoolRequest, ...grpc.CallOption) (*types.QueryGetRewardPoolResponse, error)) *RewardClient_GetRewardPool_Call {
	_c.Call.Return(run)
	return _c
}

// ListRewardPool provides a mock function with given fields: ctx, in, opts
func (_m *RewardClient) ListRewardPool(ctx context.Context, in *types.QueryAllRewardPoolRequest, opts ...grpc.CallOption) (*types.QueryAllRewardPoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRewardPool")
	}

	var r0 *types.QueryAllRewardPoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRewardPoolRequest, ...grpc.CallOption) (*types.QueryAllRewardPoolResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllRewardPoolRequest, ...grpc.CallOption) *types.QueryAllRewardPoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryAllRewardPoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllRewardPoolRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewardClient_ListRewardPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRewardPool'
type RewardClient_ListRewardPool_Call struct {
	*mock.Call
}

// ListRewardPool is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryAllRewardPoolRequest
//   - opts ...grpc.CallOption
func (_e *RewardClient_Expecter) ListRewardPool(ctx interface{}, in interface{}, opts ...interface{}) *RewardClient_ListRewardPool_Call {
	return &RewardClient_ListRewardPool_Call{Call: _e.mock.On("ListRewardPool",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RewardClient_ListRewardPool_Call) Run(run func(ctx context.Context, in *types.QueryAllRewardPoolRequest, opts ...grpc.CallOption)) *RewardClient_ListRewardPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryAllRewardPoolRequest), variadicArgs...)
	})
	return _c
}

func (_c *RewardClient_ListRewardPool_Call) Return(_a0 *types.QueryAllRewardPoolResponse, _a1 error) *RewardClient_ListRewardPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RewardClient_ListRewardPool_Call) RunAndReturn(run func(context.Context, *types.QueryAllRewardPoolRequest, ...grpc.CallOption) (*types.QueryAllRewardPoolResponse, error)) *RewardClient_ListRewardPool_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *RewardClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewardClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type RewardClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *RewardClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *RewardClient_Params_Call {
	return &RewardClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RewardClient_Params_Call) Run(run func(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption)) *RewardClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RewardClient_Params_Call) Return(_a0 *types.QueryParamsResponse, _a1 error) *RewardClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RewardClient_Params_Call) RunAndReturn(run func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)) *RewardClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewRewardClient creates a new instance of RewardClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRewardClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RewardClient {
	mock := &RewardClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
