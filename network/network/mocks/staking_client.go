// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/cosmos/cosmos-sdk/x/staking/types"
	"github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// StakingClient is an autogenerated mock type for the StakingClient type
type StakingClient struct {
	mock.Mock
}

type StakingClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StakingClient) EXPECT() *StakingClient_Expecter {
	return &StakingClient_Expecter{mock: &_m.Mock}
}

// Delegation provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Delegation(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption) (*types.QueryDelegationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delegation")
	}

	var r0 *types.QueryDelegationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegationRequest, ...grpc.CallOption) (*types.QueryDelegationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegationRequest, ...grpc.CallOption) *types.QueryDelegationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDelegationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDelegationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Delegation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delegation'
type StakingClient_Delegation_Call struct {
	*mock.Call
}

// Delegation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryDelegationRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Delegation(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Delegation_Call {
	return &StakingClient_Delegation_Call{Call: _e.mock.On("Delegation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Delegation_Call) Run(run func(ctx context.Context, in *types.QueryDelegationRequest, opts ...grpc.CallOption)) *StakingClient_Delegation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryDelegationRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Delegation_Call) Return(_a0 *types.QueryDelegationResponse, _a1 error) *StakingClient_Delegation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Delegation_Call) RunAndReturn(run func(context.Context, *types.QueryDelegationRequest, ...grpc.CallOption) (*types.QueryDelegationResponse, error)) *StakingClient_Delegation_Call {
	_c.Call.Return(run)
	return _c
}

// DelegatorDelegations provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) DelegatorDelegations(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DelegatorDelegations")
	}

	var r0 *types.QueryDelegatorDelegationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorDelegationsRequest, ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorDelegationsRequest, ...grpc.CallOption) *types.QueryDelegatorDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDelegatorDelegationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDelegatorDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_DelegatorDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegatorDelegations'
type StakingClient_DelegatorDelegations_Call struct {
	*mock.Call
}

// DelegatorDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryDelegatorDelegationsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) DelegatorDelegations(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_DelegatorDelegations_Call {
	return &StakingClient_DelegatorDelegations_Call{Call: _e.mock.On("DelegatorDelegations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_DelegatorDelegations_Call) Run(run func(ctx context.Context, in *types.QueryDelegatorDelegationsRequest, opts ...grpc.CallOption)) *StakingClient_DelegatorDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryDelegatorDelegationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_DelegatorDelegations_Call) Return(_a0 *types.QueryDelegatorDelegationsResponse, _a1 error) *StakingClient_DelegatorDelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_DelegatorDelegations_Call) RunAndReturn(run func(context.Context, *types.QueryDelegatorDelegationsRequest, ...grpc.CallOption) (*types.QueryDelegatorDelegationsResponse, error)) *StakingClient_DelegatorDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// DelegatorUnbondingDelegations provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) DelegatorUnbondingDelegations(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DelegatorUnbondingDelegations")
	}

	var r0 *types.QueryDelegatorUnbondingDelegationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest, ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest, ...grpc.CallOption) *types.QueryDelegatorUnbondingDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDelegatorUnbondingDelegationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_DelegatorUnbondingDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegatorUnbondingDelegations'
type StakingClient_DelegatorUnbondingDelegations_Call struct {
	*mock.Call
}

// DelegatorUnbondingDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryDelegatorUnbondingDelegationsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) DelegatorUnbondingDelegations(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_DelegatorUnbondingDelegations_Call {
	return &StakingClient_DelegatorUnbondingDelegations_Call{Call: _e.mock.On("DelegatorUnbondingDelegations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_DelegatorUnbondingDelegations_Call) Run(run func(ctx context.Context, in *types.QueryDelegatorUnbondingDelegationsRequest, opts ...grpc.CallOption)) *StakingClient_DelegatorUnbondingDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryDelegatorUnbondingDelegationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_DelegatorUnbondingDelegations_Call) Return(_a0 *types.QueryDelegatorUnbondingDelegationsResponse, _a1 error) *StakingClient_DelegatorUnbondingDelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_DelegatorUnbondingDelegations_Call) RunAndReturn(run func(context.Context, *types.QueryDelegatorUnbondingDelegationsRequest, ...grpc.CallOption) (*types.QueryDelegatorUnbondingDelegationsResponse, error)) *StakingClient_DelegatorUnbondingDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// DelegatorValidator provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) DelegatorValidator(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DelegatorValidator")
	}

	var r0 *types.QueryDelegatorValidatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorValidatorRequest, ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorValidatorRequest, ...grpc.CallOption) *types.QueryDelegatorValidatorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDelegatorValidatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDelegatorValidatorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_DelegatorValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegatorValidator'
type StakingClient_DelegatorValidator_Call struct {
	*mock.Call
}

// DelegatorValidator is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryDelegatorValidatorRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) DelegatorValidator(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_DelegatorValidator_Call {
	return &StakingClient_DelegatorValidator_Call{Call: _e.mock.On("DelegatorValidator",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_DelegatorValidator_Call) Run(run func(ctx context.Context, in *types.QueryDelegatorValidatorRequest, opts ...grpc.CallOption)) *StakingClient_DelegatorValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryDelegatorValidatorRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_DelegatorValidator_Call) Return(_a0 *types.QueryDelegatorValidatorResponse, _a1 error) *StakingClient_DelegatorValidator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_DelegatorValidator_Call) RunAndReturn(run func(context.Context, *types.QueryDelegatorValidatorRequest, ...grpc.CallOption) (*types.QueryDelegatorValidatorResponse, error)) *StakingClient_DelegatorValidator_Call {
	_c.Call.Return(run)
	return _c
}

// DelegatorValidators provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) DelegatorValidators(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DelegatorValidators")
	}

	var r0 *types.QueryDelegatorValidatorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorValidatorsRequest, ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryDelegatorValidatorsRequest, ...grpc.CallOption) *types.QueryDelegatorValidatorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryDelegatorValidatorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryDelegatorValidatorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_DelegatorValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegatorValidators'
type StakingClient_DelegatorValidators_Call struct {
	*mock.Call
}

// DelegatorValidators is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryDelegatorValidatorsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) DelegatorValidators(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_DelegatorValidators_Call {
	return &StakingClient_DelegatorValidators_Call{Call: _e.mock.On("DelegatorValidators",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_DelegatorValidators_Call) Run(run func(ctx context.Context, in *types.QueryDelegatorValidatorsRequest, opts ...grpc.CallOption)) *StakingClient_DelegatorValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryDelegatorValidatorsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_DelegatorValidators_Call) Return(_a0 *types.QueryDelegatorValidatorsResponse, _a1 error) *StakingClient_DelegatorValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_DelegatorValidators_Call) RunAndReturn(run func(context.Context, *types.QueryDelegatorValidatorsRequest, ...grpc.CallOption) (*types.QueryDelegatorValidatorsResponse, error)) *StakingClient_DelegatorValidators_Call {
	_c.Call.Return(run)
	return _c
}

// HistoricalInfo provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) HistoricalInfo(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HistoricalInfo")
	}

	var r0 *types.QueryHistoricalInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryHistoricalInfoRequest, ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryHistoricalInfoRequest, ...grpc.CallOption) *types.QueryHistoricalInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryHistoricalInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryHistoricalInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_HistoricalInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HistoricalInfo'
type StakingClient_HistoricalInfo_Call struct {
	*mock.Call
}

// HistoricalInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryHistoricalInfoRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) HistoricalInfo(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_HistoricalInfo_Call {
	return &StakingClient_HistoricalInfo_Call{Call: _e.mock.On("HistoricalInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_HistoricalInfo_Call) Run(run func(ctx context.Context, in *types.QueryHistoricalInfoRequest, opts ...grpc.CallOption)) *StakingClient_HistoricalInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryHistoricalInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_HistoricalInfo_Call) Return(_a0 *types.QueryHistoricalInfoResponse, _a1 error) *StakingClient_HistoricalInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_HistoricalInfo_Call) RunAndReturn(run func(context.Context, *types.QueryHistoricalInfoRequest, ...grpc.CallOption) (*types.QueryHistoricalInfoResponse, error)) *StakingClient_HistoricalInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) *types.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type StakingClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Params_Call {
	return &StakingClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Params_Call) Run(run func(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption)) *StakingClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Params_Call) Return(_a0 *types.QueryParamsResponse, _a1 error) *StakingClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Params_Call) RunAndReturn(run func(context.Context, *types.QueryParamsRequest, ...grpc.CallOption) (*types.QueryParamsResponse, error)) *StakingClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// Pool provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Pool(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption) (*types.QueryPoolResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pool")
	}

	var r0 *types.QueryPoolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryPoolRequest, ...grpc.CallOption) (*types.QueryPoolResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryPoolRequest, ...grpc.CallOption) *types.QueryPoolResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryPoolResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryPoolRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type StakingClient_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryPoolRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Pool(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Pool_Call {
	return &StakingClient_Pool_Call{Call: _e.mock.On("Pool",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Pool_Call) Run(run func(ctx context.Context, in *types.QueryPoolRequest, opts ...grpc.CallOption)) *StakingClient_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryPoolRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Pool_Call) Return(_a0 *types.QueryPoolResponse, _a1 error) *StakingClient_Pool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Pool_Call) RunAndReturn(run func(context.Context, *types.QueryPoolRequest, ...grpc.CallOption) (*types.QueryPoolResponse, error)) *StakingClient_Pool_Call {
	_c.Call.Return(run)
	return _c
}

// Redelegations provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Redelegations(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption) (*types.QueryRedelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Redelegations")
	}

	var r0 *types.QueryRedelegationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryRedelegationsRequest, ...grpc.CallOption) (*types.QueryRedelegationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryRedelegationsRequest, ...grpc.CallOption) *types.QueryRedelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryRedelegationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryRedelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Redelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redelegations'
type StakingClient_Redelegations_Call struct {
	*mock.Call
}

// Redelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryRedelegationsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Redelegations(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Redelegations_Call {
	return &StakingClient_Redelegations_Call{Call: _e.mock.On("Redelegations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Redelegations_Call) Run(run func(ctx context.Context, in *types.QueryRedelegationsRequest, opts ...grpc.CallOption)) *StakingClient_Redelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryRedelegationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Redelegations_Call) Return(_a0 *types.QueryRedelegationsResponse, _a1 error) *StakingClient_Redelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Redelegations_Call) RunAndReturn(run func(context.Context, *types.QueryRedelegationsRequest, ...grpc.CallOption) (*types.QueryRedelegationsResponse, error)) *StakingClient_Redelegations_Call {
	_c.Call.Return(run)
	return _c
}

// UnbondingDelegation provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) UnbondingDelegation(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnbondingDelegation")
	}

	var r0 *types.QueryUnbondingDelegationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryUnbondingDelegationRequest, ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryUnbondingDelegationRequest, ...grpc.CallOption) *types.QueryUnbondingDelegationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryUnbondingDelegationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryUnbondingDelegationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_UnbondingDelegation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbondingDelegation'
type StakingClient_UnbondingDelegation_Call struct {
	*mock.Call
}

// UnbondingDelegation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryUnbondingDelegationRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) UnbondingDelegation(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_UnbondingDelegation_Call {
	return &StakingClient_UnbondingDelegation_Call{Call: _e.mock.On("UnbondingDelegation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_UnbondingDelegation_Call) Run(run func(ctx context.Context, in *types.QueryUnbondingDelegationRequest, opts ...grpc.CallOption)) *StakingClient_UnbondingDelegation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryUnbondingDelegationRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_UnbondingDelegation_Call) Return(_a0 *types.QueryUnbondingDelegationResponse, _a1 error) *StakingClient_UnbondingDelegation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_UnbondingDelegation_Call) RunAndReturn(run func(context.Context, *types.QueryUnbondingDelegationRequest, ...grpc.CallOption) (*types.QueryUnbondingDelegationResponse, error)) *StakingClient_UnbondingDelegation_Call {
	_c.Call.Return(run)
	return _c
}

// Validator provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Validator(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption) (*types.QueryValidatorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Validator")
	}

	var r0 *types.QueryValidatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorRequest, ...grpc.CallOption) (*types.QueryValidatorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorRequest, ...grpc.CallOption) *types.QueryValidatorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Validator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validator'
type StakingClient_Validator_Call struct {
	*mock.Call
}

// Validator is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryValidatorRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Validator(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Validator_Call {
	return &StakingClient_Validator_Call{Call: _e.mock.On("Validator",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Validator_Call) Run(run func(ctx context.Context, in *types.QueryValidatorRequest, opts ...grpc.CallOption)) *StakingClient_Validator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryValidatorRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Validator_Call) Return(_a0 *types.QueryValidatorResponse, _a1 error) *StakingClient_Validator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Validator_Call) RunAndReturn(run func(context.Context, *types.QueryValidatorRequest, ...grpc.CallOption) (*types.QueryValidatorResponse, error)) *StakingClient_Validator_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorDelegations provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) ValidatorDelegations(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorDelegations")
	}

	var r0 *types.QueryValidatorDelegationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorDelegationsRequest, ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorDelegationsRequest, ...grpc.CallOption) *types.QueryValidatorDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorDelegationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_ValidatorDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorDelegations'
type StakingClient_ValidatorDelegations_Call struct {
	*mock.Call
}

// ValidatorDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryValidatorDelegationsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) ValidatorDelegations(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_ValidatorDelegations_Call {
	return &StakingClient_ValidatorDelegations_Call{Call: _e.mock.On("ValidatorDelegations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_ValidatorDelegations_Call) Run(run func(ctx context.Context, in *types.QueryValidatorDelegationsRequest, opts ...grpc.CallOption)) *StakingClient_ValidatorDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryValidatorDelegationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_ValidatorDelegations_Call) Return(_a0 *types.QueryValidatorDelegationsResponse, _a1 error) *StakingClient_ValidatorDelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_ValidatorDelegations_Call) RunAndReturn(run func(context.Context, *types.QueryValidatorDelegationsRequest, ...grpc.CallOption) (*types.QueryValidatorDelegationsResponse, error)) *StakingClient_ValidatorDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorUnbondingDelegations provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) ValidatorUnbondingDelegations(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorUnbondingDelegations")
	}

	var r0 *types.QueryValidatorUnbondingDelegationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorUnbondingDelegationsRequest, ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorUnbondingDelegationsRequest, ...grpc.CallOption) *types.QueryValidatorUnbondingDelegationsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorUnbondingDelegationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorUnbondingDelegationsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_ValidatorUnbondingDelegations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorUnbondingDelegations'
type StakingClient_ValidatorUnbondingDelegations_Call struct {
	*mock.Call
}

// ValidatorUnbondingDelegations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryValidatorUnbondingDelegationsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) ValidatorUnbondingDelegations(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_ValidatorUnbondingDelegations_Call {
	return &StakingClient_ValidatorUnbondingDelegations_Call{Call: _e.mock.On("ValidatorUnbondingDelegations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_ValidatorUnbondingDelegations_Call) Run(run func(ctx context.Context, in *types.QueryValidatorUnbondingDelegationsRequest, opts ...grpc.CallOption)) *StakingClient_ValidatorUnbondingDelegations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryValidatorUnbondingDelegationsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_ValidatorUnbondingDelegations_Call) Return(_a0 *types.QueryValidatorUnbondingDelegationsResponse, _a1 error) *StakingClient_ValidatorUnbondingDelegations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_ValidatorUnbondingDelegations_Call) RunAndReturn(run func(context.Context, *types.QueryValidatorUnbondingDelegationsRequest, ...grpc.CallOption) (*types.QueryValidatorUnbondingDelegationsResponse, error)) *StakingClient_ValidatorUnbondingDelegations_Call {
	_c.Call.Return(run)
	return _c
}

// Validators provides a mock function with given fields: ctx, in, opts
func (_m *StakingClient) Validators(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption) (*types.QueryValidatorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Validators")
	}

	var r0 *types.QueryValidatorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorsRequest, ...grpc.CallOption) (*types.QueryValidatorsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorsRequest, ...grpc.CallOption) *types.QueryValidatorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingClient_Validators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validators'
type StakingClient_Validators_Call struct {
	*mock.Call
}

// Validators is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.QueryValidatorsRequest
//   - opts ...grpc.CallOption
func (_e *StakingClient_Expecter) Validators(ctx interface{}, in interface{}, opts ...interface{}) *StakingClient_Validators_Call {
	return &StakingClient_Validators_Call{Call: _e.mock.On("Validators",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StakingClient_Validators_Call) Run(run func(ctx context.Context, in *types.QueryValidatorsRequest, opts ...grpc.CallOption)) *StakingClient_Validators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.QueryValidatorsRequest), variadicArgs...)
	})
	return _c
}

func (_c *StakingClient_Validators_Call) Return(_a0 *types.QueryValidatorsResponse, _a1 error) *StakingClient_Validators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingClient_Validators_Call) RunAndReturn(run func(context.Context, *types.QueryValidatorsRequest, ...grpc.CallOption) (*types.QueryValidatorsResponse, error)) *StakingClient_Validators_Call {
	_c.Call.Return(run)
	return _c
}

// NewStakingClient creates a new instance of StakingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakingClient {
	mock := &StakingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
